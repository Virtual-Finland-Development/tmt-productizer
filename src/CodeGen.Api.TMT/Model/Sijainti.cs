/*
 * TMT - Työpaikkailmoituksien hakurajapinta | Get Job postings
 *
 * <p>Tämän rajapinnan avulla voit hakea kaikki Työmarkkinatorilla julkaistut työpaikkailmoitukset.</p> <p>With this rest interface, you can retrieve all Job postings published in Job market Finland.</p>
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CodeGen.Api.TMT.Client.OpenAPIDateConverter;

namespace CodeGen.Api.TMT.Model
{
    /// <summary>
    /// **fi:** Työn sijainti | **en:** Work location
    /// </summary>
    [DataContract(Name = "Sijainti")]
    public partial class Sijainti : IEquatable<Sijainti>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Sijainti" /> class.
        /// </summary>
        /// <param name="kunta">kunta.</param>
        /// <param name="maa">maa.</param>
        /// <param name="maakunta">maakunta.</param>
        /// <param name="sijaintiJoustava">**fi:** Työn sijainti on joustava tai se on työntekijän valittavissa (esim. etätyö) | **en:** No fixed work location or the employee can determine the location (telework).</param>
        /// <param name="toimipaikka">toimipaikka.</param>
        public Sijainti(List<string> kunta = default(List<string>), List<string> maa = default(List<string>), List<string> maakunta = default(List<string>), bool sijaintiJoustava = default(bool), Toimipaikka toimipaikka = default(Toimipaikka))
        {
            this.Kunta = kunta;
            this.Maa = maa;
            this.Maakunta = maakunta;
            this.SijaintiJoustava = sijaintiJoustava;
            this.Toimipaikka = toimipaikka;
        }

        /// <summary>
        /// Gets or Sets Kunta
        /// </summary>
        [DataMember(Name = "kunta", EmitDefaultValue = false)]
        public List<string> Kunta { get; set; }

        /// <summary>
        /// Gets or Sets Maa
        /// </summary>
        [DataMember(Name = "maa", EmitDefaultValue = false)]
        public List<string> Maa { get; set; }

        /// <summary>
        /// Gets or Sets Maakunta
        /// </summary>
        [DataMember(Name = "maakunta", EmitDefaultValue = false)]
        public List<string> Maakunta { get; set; }

        /// <summary>
        /// **fi:** Työn sijainti on joustava tai se on työntekijän valittavissa (esim. etätyö) | **en:** No fixed work location or the employee can determine the location (telework)
        /// </summary>
        /// <value>**fi:** Työn sijainti on joustava tai se on työntekijän valittavissa (esim. etätyö) | **en:** No fixed work location or the employee can determine the location (telework)</value>
        [DataMember(Name = "sijaintiJoustava", EmitDefaultValue = true)]
        public bool SijaintiJoustava { get; set; }

        /// <summary>
        /// Gets or Sets Toimipaikka
        /// </summary>
        [DataMember(Name = "toimipaikka", EmitDefaultValue = false)]
        public Toimipaikka Toimipaikka { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Sijainti {\n");
            sb.Append("  Kunta: ").Append(Kunta).Append("\n");
            sb.Append("  Maa: ").Append(Maa).Append("\n");
            sb.Append("  Maakunta: ").Append(Maakunta).Append("\n");
            sb.Append("  SijaintiJoustava: ").Append(SijaintiJoustava).Append("\n");
            sb.Append("  Toimipaikka: ").Append(Toimipaikka).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Sijainti);
        }

        /// <summary>
        /// Returns true if Sijainti instances are equal
        /// </summary>
        /// <param name="input">Instance of Sijainti to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Sijainti input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Kunta == input.Kunta ||
                    this.Kunta != null &&
                    input.Kunta != null &&
                    this.Kunta.SequenceEqual(input.Kunta)
                ) && 
                (
                    this.Maa == input.Maa ||
                    this.Maa != null &&
                    input.Maa != null &&
                    this.Maa.SequenceEqual(input.Maa)
                ) && 
                (
                    this.Maakunta == input.Maakunta ||
                    this.Maakunta != null &&
                    input.Maakunta != null &&
                    this.Maakunta.SequenceEqual(input.Maakunta)
                ) && 
                (
                    this.SijaintiJoustava == input.SijaintiJoustava ||
                    this.SijaintiJoustava.Equals(input.SijaintiJoustava)
                ) && 
                (
                    this.Toimipaikka == input.Toimipaikka ||
                    (this.Toimipaikka != null &&
                    this.Toimipaikka.Equals(input.Toimipaikka))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Kunta != null)
                {
                    hashCode = (hashCode * 59) + this.Kunta.GetHashCode();
                }
                if (this.Maa != null)
                {
                    hashCode = (hashCode * 59) + this.Maa.GetHashCode();
                }
                if (this.Maakunta != null)
                {
                    hashCode = (hashCode * 59) + this.Maakunta.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SijaintiJoustava.GetHashCode();
                if (this.Toimipaikka != null)
                {
                    hashCode = (hashCode * 59) + this.Toimipaikka.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
