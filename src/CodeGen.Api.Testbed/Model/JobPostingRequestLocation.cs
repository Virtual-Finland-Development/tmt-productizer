/*
 * Job Posting
 *
 * Data product for Job Posting
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CodeGen.Api.Testbed.Client.OpenAPIDateConverter;

namespace CodeGen.Api.Testbed.Model
{
    /// <summary>
    /// JobPostingRequestLocation
    /// </summary>
    [DataContract(Name = "JobPostingRequest_location")]
    public partial class JobPostingRequestLocation : IEquatable<JobPostingRequestLocation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobPostingRequestLocation" /> class.
        /// </summary>
        /// <param name="countries">Sijainnin maa-tiedon koodistona käytetään ISO 3166 standardin mukaisia numerokoodeja..</param>
        /// <param name="regions">Sijainnin maakunta-tiedon koodistona käytetään Tilastokeskuksen Maakunnat 2022-luokituksen mukaisia numerokoodeja..</param>
        /// <param name="municipalities">Sijainnin kunta-tiedon koodistona käytetään Tilastokeskuksen Kunnat 2022-luokituksen mukaisia kuntien numerokoodeja..</param>
        public JobPostingRequestLocation(List<string> countries = default(List<string>), List<string> regions = default(List<string>), List<string> municipalities = default(List<string>))
        {
            this.Countries = countries;
            this.Regions = regions;
            this.Municipalities = municipalities;
        }

        /// <summary>
        /// Sijainnin maa-tiedon koodistona käytetään ISO 3166 standardin mukaisia numerokoodeja.
        /// </summary>
        /// <value>Sijainnin maa-tiedon koodistona käytetään ISO 3166 standardin mukaisia numerokoodeja.</value>
        [DataMember(Name = "countries", EmitDefaultValue = false)]
        public List<string> Countries { get; set; }

        /// <summary>
        /// Sijainnin maakunta-tiedon koodistona käytetään Tilastokeskuksen Maakunnat 2022-luokituksen mukaisia numerokoodeja.
        /// </summary>
        /// <value>Sijainnin maakunta-tiedon koodistona käytetään Tilastokeskuksen Maakunnat 2022-luokituksen mukaisia numerokoodeja.</value>
        [DataMember(Name = "regions", EmitDefaultValue = false)]
        public List<string> Regions { get; set; }

        /// <summary>
        /// Sijainnin kunta-tiedon koodistona käytetään Tilastokeskuksen Kunnat 2022-luokituksen mukaisia kuntien numerokoodeja.
        /// </summary>
        /// <value>Sijainnin kunta-tiedon koodistona käytetään Tilastokeskuksen Kunnat 2022-luokituksen mukaisia kuntien numerokoodeja.</value>
        [DataMember(Name = "municipalities", EmitDefaultValue = false)]
        public List<string> Municipalities { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JobPostingRequestLocation {\n");
            sb.Append("  Countries: ").Append(Countries).Append("\n");
            sb.Append("  Regions: ").Append(Regions).Append("\n");
            sb.Append("  Municipalities: ").Append(Municipalities).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JobPostingRequestLocation);
        }

        /// <summary>
        /// Returns true if JobPostingRequestLocation instances are equal
        /// </summary>
        /// <param name="input">Instance of JobPostingRequestLocation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JobPostingRequestLocation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Countries == input.Countries ||
                    this.Countries != null &&
                    input.Countries != null &&
                    this.Countries.SequenceEqual(input.Countries)
                ) && 
                (
                    this.Regions == input.Regions ||
                    this.Regions != null &&
                    input.Regions != null &&
                    this.Regions.SequenceEqual(input.Regions)
                ) && 
                (
                    this.Municipalities == input.Municipalities ||
                    this.Municipalities != null &&
                    input.Municipalities != null &&
                    this.Municipalities.SequenceEqual(input.Municipalities)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Countries != null)
                {
                    hashCode = (hashCode * 59) + this.Countries.GetHashCode();
                }
                if (this.Regions != null)
                {
                    hashCode = (hashCode * 59) + this.Regions.GetHashCode();
                }
                if (this.Municipalities != null)
                {
                    hashCode = (hashCode * 59) + this.Municipalities.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
