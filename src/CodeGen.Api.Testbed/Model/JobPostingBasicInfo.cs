/*
 * Job Posting
 *
 * Data product for Job Posting
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CodeGen.Api.Testbed.Client.OpenAPIDateConverter;

namespace CodeGen.Api.Testbed.Model
{
    /// <summary>
    /// JobPostingBasicInfo
    /// </summary>
    [DataContract(Name = "JobPosting_basicInfo")]
    public partial class JobPostingBasicInfo : IEquatable<JobPostingBasicInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobPostingBasicInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected JobPostingBasicInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="JobPostingBasicInfo" /> class.
        /// </summary>
        /// <param name="title">Title of the job posting (required).</param>
        /// <param name="description">Short description about the job (required).</param>
        /// <param name="workTimeType">&lt;pre&gt;01 &#x3D; Kokoaikatyö 02 &#x3D; Osa-aikatyö&lt;/pre&gt;.</param>
        public JobPostingBasicInfo(string title = default(string), string description = default(string), string workTimeType = default(string))
        {
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new ArgumentNullException("title is a required property for JobPostingBasicInfo and cannot be null");
            }
            this.Title = title;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for JobPostingBasicInfo and cannot be null");
            }
            this.Description = description;
            this.WorkTimeType = workTimeType;
        }

        /// <summary>
        /// Title of the job posting
        /// </summary>
        /// <value>Title of the job posting</value>
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Short description about the job
        /// </summary>
        /// <value>Short description about the job</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// &lt;pre&gt;01 &#x3D; Kokoaikatyö 02 &#x3D; Osa-aikatyö&lt;/pre&gt;
        /// </summary>
        /// <value>&lt;pre&gt;01 &#x3D; Kokoaikatyö 02 &#x3D; Osa-aikatyö&lt;/pre&gt;</value>
        [DataMember(Name = "workTimeType", EmitDefaultValue = false)]
        public string WorkTimeType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JobPostingBasicInfo {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  WorkTimeType: ").Append(WorkTimeType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JobPostingBasicInfo);
        }

        /// <summary>
        /// Returns true if JobPostingBasicInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of JobPostingBasicInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JobPostingBasicInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.WorkTimeType == input.WorkTimeType ||
                    (this.WorkTimeType != null &&
                    this.WorkTimeType.Equals(input.WorkTimeType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.WorkTimeType != null)
                {
                    hashCode = (hashCode * 59) + this.WorkTimeType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
