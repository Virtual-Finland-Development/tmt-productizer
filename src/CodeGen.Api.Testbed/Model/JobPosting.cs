/*
 * Job Posting
 *
 * Data product for Job Posting
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CodeGen.Api.Testbed.Client.OpenAPIDateConverter;

namespace CodeGen.Api.Testbed.Model
{
    /// <summary>
    /// JobPosting
    /// </summary>
    [DataContract(Name = "JobPosting")]
    public partial class JobPosting : IEquatable<JobPosting>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobPosting" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected JobPosting() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="JobPosting" /> class.
        /// </summary>
        /// <param name="employer">employer (required).</param>
        /// <param name="location">location (required).</param>
        /// <param name="basicInfo">basicInfo (required).</param>
        /// <param name="publishedAt">publishedAt (required).</param>
        /// <param name="applicationEndDate">Last date to apply for the job.</param>
        /// <param name="applicationUrl">Link to external application page.</param>
        public JobPosting(string employer = default(string), JobPostingLocation location = default(JobPostingLocation), JobPostingBasicInfo basicInfo = default(JobPostingBasicInfo), DateTime publishedAt = default(DateTime), DateTime applicationEndDate = default(DateTime), string applicationUrl = default(string))
        {
            // to ensure "employer" is required (not null)
            if (employer == null)
            {
                throw new ArgumentNullException("employer is a required property for JobPosting and cannot be null");
            }
            this.Employer = employer;
            // to ensure "location" is required (not null)
            if (location == null)
            {
                throw new ArgumentNullException("location is a required property for JobPosting and cannot be null");
            }
            this.Location = location;
            // to ensure "basicInfo" is required (not null)
            if (basicInfo == null)
            {
                throw new ArgumentNullException("basicInfo is a required property for JobPosting and cannot be null");
            }
            this.BasicInfo = basicInfo;
            this.PublishedAt = publishedAt;
            this.ApplicationEndDate = applicationEndDate;
            this.ApplicationUrl = applicationUrl;
        }

        /// <summary>
        /// Gets or Sets Employer
        /// </summary>
        [DataMember(Name = "employer", IsRequired = true, EmitDefaultValue = true)]
        public string Employer { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name = "location", IsRequired = true, EmitDefaultValue = true)]
        public JobPostingLocation Location { get; set; }

        /// <summary>
        /// Gets or Sets BasicInfo
        /// </summary>
        [DataMember(Name = "basicInfo", IsRequired = true, EmitDefaultValue = true)]
        public JobPostingBasicInfo BasicInfo { get; set; }

        /// <summary>
        /// Gets or Sets PublishedAt
        /// </summary>
        [DataMember(Name = "publishedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime PublishedAt { get; set; }

        /// <summary>
        /// Last date to apply for the job
        /// </summary>
        /// <value>Last date to apply for the job</value>
        [DataMember(Name = "applicationEndDate", EmitDefaultValue = false)]
        public DateTime ApplicationEndDate { get; set; }

        /// <summary>
        /// Link to external application page
        /// </summary>
        /// <value>Link to external application page</value>
        [DataMember(Name = "applicationUrl", EmitDefaultValue = false)]
        public string ApplicationUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JobPosting {\n");
            sb.Append("  Employer: ").Append(Employer).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  BasicInfo: ").Append(BasicInfo).Append("\n");
            sb.Append("  PublishedAt: ").Append(PublishedAt).Append("\n");
            sb.Append("  ApplicationEndDate: ").Append(ApplicationEndDate).Append("\n");
            sb.Append("  ApplicationUrl: ").Append(ApplicationUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JobPosting);
        }

        /// <summary>
        /// Returns true if JobPosting instances are equal
        /// </summary>
        /// <param name="input">Instance of JobPosting to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JobPosting input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Employer == input.Employer ||
                    (this.Employer != null &&
                    this.Employer.Equals(input.Employer))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.BasicInfo == input.BasicInfo ||
                    (this.BasicInfo != null &&
                    this.BasicInfo.Equals(input.BasicInfo))
                ) && 
                (
                    this.PublishedAt == input.PublishedAt ||
                    (this.PublishedAt != null &&
                    this.PublishedAt.Equals(input.PublishedAt))
                ) && 
                (
                    this.ApplicationEndDate == input.ApplicationEndDate ||
                    (this.ApplicationEndDate != null &&
                    this.ApplicationEndDate.Equals(input.ApplicationEndDate))
                ) && 
                (
                    this.ApplicationUrl == input.ApplicationUrl ||
                    (this.ApplicationUrl != null &&
                    this.ApplicationUrl.Equals(input.ApplicationUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Employer != null)
                {
                    hashCode = (hashCode * 59) + this.Employer.GetHashCode();
                }
                if (this.Location != null)
                {
                    hashCode = (hashCode * 59) + this.Location.GetHashCode();
                }
                if (this.BasicInfo != null)
                {
                    hashCode = (hashCode * 59) + this.BasicInfo.GetHashCode();
                }
                if (this.PublishedAt != null)
                {
                    hashCode = (hashCode * 59) + this.PublishedAt.GetHashCode();
                }
                if (this.ApplicationEndDate != null)
                {
                    hashCode = (hashCode * 59) + this.ApplicationEndDate.GetHashCode();
                }
                if (this.ApplicationUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ApplicationUrl.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
