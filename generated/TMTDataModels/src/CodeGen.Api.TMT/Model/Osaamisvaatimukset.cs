/*
 * TMT - Työpaikkailmoituksien hakurajapinta | Get Job postings
 *
 * <p>Tämän rajapinnan avulla voit hakea kaikki Työmarkkinatorilla julkaistut työpaikkailmoitukset.</p> <p>With this rest interface, you can retrieve all Job postings published in Job market Finland.</p>
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CodeGen.Api.TMT.Client.OpenAPIDateConverter;

namespace CodeGen.Api.TMT.Model
{
    /// <summary>
    /// **fi:** Työpaikkailmoituksen osaamisvaatimukset | **en:** Job posting skill and competence requirements
    /// </summary>
    [DataContract(Name = "Osaamisvaatimukset")]
    public partial class Osaamisvaatimukset : IEquatable<Osaamisvaatimukset>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Osaamisvaatimukset" /> class.
        /// </summary>
        /// <param name="ajokortti">ajokortti.</param>
        /// <param name="ammatit">**fi:** Ammatit | **en:** Occupations.</param>
        /// <param name="kielitaidot">**fi:** Muu kielitaito | **en:** Other language skills.</param>
        /// <param name="kortitJaLuvat">kortitJaLuvat.</param>
        /// <param name="koulutusaste">**fi:** Koulutusaste | **en:** Level of education&lt;details&gt;&lt;summary&gt;Koodit | Codes&lt;/summary&gt;&lt;pre&gt;31 &#x3D; Lukiokoulutus |  General upper secondary education 32 &#x3D; Ammatillinen peruskoulutus | Vocational upper secondary education and training 4 &#x3D; Erikoisammattikoulutusaste | Post-secondary non-tertiary education 5 &#x3D; Alin korkea-aste | Short-cycle tertiary education 6 &#x3D; Alempi korkeakouluaste | Bachelor&#39;s or equivalent level 7 &#x3D; Ylempi korkeakouluaste | Master&#39;s or equivalent level 8 &#x3D; Tutkijakoulutusaste | Doctoral or equivalent level&lt;/pre&gt;&lt;/details&gt;.</param>
        /// <param name="osaamiset">**fi:** Osaamiset | **en:** Skills.</param>
        /// <param name="rikosrekisteriote">**fi:** Tehtävässä vaaditaan rikoskeristeriote, joka perustuu Lakiin lasten kanssa työskentelevien rikostaustan selvittämisestä (504/2002) | **en:** The task requires a criminal record, which is based on the Act on checking the criminal backround of persons working with children (504/2002).</param>
        public Osaamisvaatimukset(Ajokortti ajokortti = default(Ajokortti), List<LuokiteltuArvo> ammatit = default(List<LuokiteltuArvo>), List<Kielitaito> kielitaidot = default(List<Kielitaito>), KortitJaLuvat kortitJaLuvat = default(KortitJaLuvat), string koulutusaste = default(string), List<LuokiteltuArvo> osaamiset = default(List<LuokiteltuArvo>), bool rikosrekisteriote = default(bool))
        {
            this.Ajokortti = ajokortti;
            this.Ammatit = ammatit;
            this.Kielitaidot = kielitaidot;
            this.KortitJaLuvat = kortitJaLuvat;
            this.Koulutusaste = koulutusaste;
            this.Osaamiset = osaamiset;
            this.Rikosrekisteriote = rikosrekisteriote;
        }

        /// <summary>
        /// Gets or Sets Ajokortti
        /// </summary>
        [DataMember(Name = "ajokortti", EmitDefaultValue = false)]
        public Ajokortti Ajokortti { get; set; }

        /// <summary>
        /// **fi:** Ammatit | **en:** Occupations
        /// </summary>
        /// <value>**fi:** Ammatit | **en:** Occupations</value>
        [DataMember(Name = "ammatit", EmitDefaultValue = false)]
        public List<LuokiteltuArvo> Ammatit { get; set; }

        /// <summary>
        /// **fi:** Muu kielitaito | **en:** Other language skills
        /// </summary>
        /// <value>**fi:** Muu kielitaito | **en:** Other language skills</value>
        [DataMember(Name = "kielitaidot", EmitDefaultValue = false)]
        public List<Kielitaito> Kielitaidot { get; set; }

        /// <summary>
        /// Gets or Sets KortitJaLuvat
        /// </summary>
        [DataMember(Name = "kortitJaLuvat", EmitDefaultValue = false)]
        public KortitJaLuvat KortitJaLuvat { get; set; }

        /// <summary>
        /// **fi:** Koulutusaste | **en:** Level of education&lt;details&gt;&lt;summary&gt;Koodit | Codes&lt;/summary&gt;&lt;pre&gt;31 &#x3D; Lukiokoulutus |  General upper secondary education 32 &#x3D; Ammatillinen peruskoulutus | Vocational upper secondary education and training 4 &#x3D; Erikoisammattikoulutusaste | Post-secondary non-tertiary education 5 &#x3D; Alin korkea-aste | Short-cycle tertiary education 6 &#x3D; Alempi korkeakouluaste | Bachelor&#39;s or equivalent level 7 &#x3D; Ylempi korkeakouluaste | Master&#39;s or equivalent level 8 &#x3D; Tutkijakoulutusaste | Doctoral or equivalent level&lt;/pre&gt;&lt;/details&gt;
        /// </summary>
        /// <value>**fi:** Koulutusaste | **en:** Level of education&lt;details&gt;&lt;summary&gt;Koodit | Codes&lt;/summary&gt;&lt;pre&gt;31 &#x3D; Lukiokoulutus |  General upper secondary education 32 &#x3D; Ammatillinen peruskoulutus | Vocational upper secondary education and training 4 &#x3D; Erikoisammattikoulutusaste | Post-secondary non-tertiary education 5 &#x3D; Alin korkea-aste | Short-cycle tertiary education 6 &#x3D; Alempi korkeakouluaste | Bachelor&#39;s or equivalent level 7 &#x3D; Ylempi korkeakouluaste | Master&#39;s or equivalent level 8 &#x3D; Tutkijakoulutusaste | Doctoral or equivalent level&lt;/pre&gt;&lt;/details&gt;</value>
        [DataMember(Name = "koulutusaste", EmitDefaultValue = false)]
        public string Koulutusaste { get; set; }

        /// <summary>
        /// **fi:** Osaamiset | **en:** Skills
        /// </summary>
        /// <value>**fi:** Osaamiset | **en:** Skills</value>
        [DataMember(Name = "osaamiset", EmitDefaultValue = false)]
        public List<LuokiteltuArvo> Osaamiset { get; set; }

        /// <summary>
        /// **fi:** Tehtävässä vaaditaan rikoskeristeriote, joka perustuu Lakiin lasten kanssa työskentelevien rikostaustan selvittämisestä (504/2002) | **en:** The task requires a criminal record, which is based on the Act on checking the criminal backround of persons working with children (504/2002)
        /// </summary>
        /// <value>**fi:** Tehtävässä vaaditaan rikoskeristeriote, joka perustuu Lakiin lasten kanssa työskentelevien rikostaustan selvittämisestä (504/2002) | **en:** The task requires a criminal record, which is based on the Act on checking the criminal backround of persons working with children (504/2002)</value>
        [DataMember(Name = "rikosrekisteriote", EmitDefaultValue = true)]
        public bool Rikosrekisteriote { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Osaamisvaatimukset {\n");
            sb.Append("  Ajokortti: ").Append(Ajokortti).Append("\n");
            sb.Append("  Ammatit: ").Append(Ammatit).Append("\n");
            sb.Append("  Kielitaidot: ").Append(Kielitaidot).Append("\n");
            sb.Append("  KortitJaLuvat: ").Append(KortitJaLuvat).Append("\n");
            sb.Append("  Koulutusaste: ").Append(Koulutusaste).Append("\n");
            sb.Append("  Osaamiset: ").Append(Osaamiset).Append("\n");
            sb.Append("  Rikosrekisteriote: ").Append(Rikosrekisteriote).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Osaamisvaatimukset);
        }

        /// <summary>
        /// Returns true if Osaamisvaatimukset instances are equal
        /// </summary>
        /// <param name="input">Instance of Osaamisvaatimukset to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Osaamisvaatimukset input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Ajokortti == input.Ajokortti ||
                    (this.Ajokortti != null &&
                    this.Ajokortti.Equals(input.Ajokortti))
                ) && 
                (
                    this.Ammatit == input.Ammatit ||
                    this.Ammatit != null &&
                    input.Ammatit != null &&
                    this.Ammatit.SequenceEqual(input.Ammatit)
                ) && 
                (
                    this.Kielitaidot == input.Kielitaidot ||
                    this.Kielitaidot != null &&
                    input.Kielitaidot != null &&
                    this.Kielitaidot.SequenceEqual(input.Kielitaidot)
                ) && 
                (
                    this.KortitJaLuvat == input.KortitJaLuvat ||
                    (this.KortitJaLuvat != null &&
                    this.KortitJaLuvat.Equals(input.KortitJaLuvat))
                ) && 
                (
                    this.Koulutusaste == input.Koulutusaste ||
                    (this.Koulutusaste != null &&
                    this.Koulutusaste.Equals(input.Koulutusaste))
                ) && 
                (
                    this.Osaamiset == input.Osaamiset ||
                    this.Osaamiset != null &&
                    input.Osaamiset != null &&
                    this.Osaamiset.SequenceEqual(input.Osaamiset)
                ) && 
                (
                    this.Rikosrekisteriote == input.Rikosrekisteriote ||
                    this.Rikosrekisteriote.Equals(input.Rikosrekisteriote)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ajokortti != null)
                {
                    hashCode = (hashCode * 59) + this.Ajokortti.GetHashCode();
                }
                if (this.Ammatit != null)
                {
                    hashCode = (hashCode * 59) + this.Ammatit.GetHashCode();
                }
                if (this.Kielitaidot != null)
                {
                    hashCode = (hashCode * 59) + this.Kielitaidot.GetHashCode();
                }
                if (this.KortitJaLuvat != null)
                {
                    hashCode = (hashCode * 59) + this.KortitJaLuvat.GetHashCode();
                }
                if (this.Koulutusaste != null)
                {
                    hashCode = (hashCode * 59) + this.Koulutusaste.GetHashCode();
                }
                if (this.Osaamiset != null)
                {
                    hashCode = (hashCode * 59) + this.Osaamiset.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Rikosrekisteriote.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
